"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20960],{12634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"auto-docs/enums_enums/CachedOperationTypeAdapter/operator_equals","title":"operator_equals","description":"1.  @override","source":"@site/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/operator_equals.md","sourceDirName":"auto-docs/enums_enums/CachedOperationTypeAdapter","slug":"/auto-docs/enums_enums/CachedOperationTypeAdapter/operator_equals","permalink":"/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/operator_equals","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa/edit/develop/docs/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/operator_equals.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hashCode","permalink":"/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/hashCode"},"next":{"title":"read","permalink":"/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/read"}}');var o=n(74848),s=n(28453);const a={},d="operator == method",i={},c=[{value:"Implementation",id:"implementation",level:2},{value:"CachedOperationTypeAdapter class",id:"cachedoperationtypeadapter-class",level:5}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("div",{children:(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"operator--method",children:"operator == method"})})}),"\n",(0,o.jsx)("div",{children:(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["@",(0,o.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/override-constant.html",children:"override"})]}),"\n"]})}),"\n",(0,o.jsxs)(t.p,{children:["[",(0,o.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/bool-class.html",children:"bool"}),"]\noperator ==("]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["[[",(0,o.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/Object-class.md",children:"Object"}),"]\nother]"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:")"}),"\n",(0,o.jsx)(t.p,{children:"override"}),"\n",(0,o.jsx)(t.p,{children:"The equality operator."}),"\n",(0,o.jsxs)(t.p,{children:["The default behavior for all\n",(0,o.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/Object-class.html",children:"Object"}),"s\nis to return true if and only if this object and ",(0,o.jsx)(t.code,{children:"other"})," are the same\nobject."]}),"\n",(0,o.jsx)(t.p,{children:"Override this method to specify a different equality relation on a\nclass. The overriding method must still be an equivalence relation. That\nis, it must be:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Total: It must return a boolean for all arguments. It should never\nthrow."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Reflexive: For all objects ",(0,o.jsx)(t.code,{children:"o"}),", ",(0,o.jsx)(t.code,{children:"o == o"})," must be true."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Symmetric: For all objects ",(0,o.jsx)(t.code,{children:"o1"})," and ",(0,o.jsx)(t.code,{children:"o2"}),", ",(0,o.jsx)(t.code,{children:"o1 == o2"})," and ",(0,o.jsx)(t.code,{children:"o2 == o1"}),"\nmust either both be true, or both be false."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Transitive: For all objects ",(0,o.jsx)(t.code,{children:"o1"}),", ",(0,o.jsx)(t.code,{children:"o2"}),", and ",(0,o.jsx)(t.code,{children:"o3"}),", if ",(0,o.jsx)(t.code,{children:"o1 == o2"})," and\n",(0,o.jsx)(t.code,{children:"o2 == o3"})," are true, then ",(0,o.jsx)(t.code,{children:"o1 == o3"})," must be true."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The method should also be consistent over time, so whether two objects\nare equal should only change if at least one of the objects was\nmodified."}),"\n",(0,o.jsxs)(t.p,{children:["If a subclass overrides the equality operator, it should override the\n",(0,o.jsx)(t.a,{href:"/docs/auto-docs/enums_enums/CachedOperationTypeAdapter/hashCode",children:"hashCode"}),"\nmethod as well to maintain consistency."]}),"\n",(0,o.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-language-dart",children:"@override\nbool operator ==(Object other) =>\n    identical(this, other) ||\n    other is CachedOperationTypeAdapter &&\n        runtimeType == other.runtimeType &&\n        typeId == other.typeId;\n"})}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/docs/auto-docs/",children:"talawa"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"../../enums_enums/",children:"enums"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"/docs/auto-docs/enums_enums/CachedOperationTypeAdapter-class",children:"CachedOperationTypeAdapter"})}),"\n",(0,o.jsx)(t.li,{children:"operator == method"}),"\n"]}),"\n",(0,o.jsx)(t.h5,{id:"cachedoperationtypeadapter-class",children:"CachedOperationTypeAdapter class"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var r=n(96540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);