"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25769],{92826:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/operator_equals","title":"operator_equals","description":"1.  @override","source":"@site/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/operator_equals.md","sourceDirName":"auto-docs/models_caching_cached_user_action/CachedUserActionAdapter","slug":"/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/operator_equals","permalink":"/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/operator_equals","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa/edit/develop/docs/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/operator_equals.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hashCode","permalink":"/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/hashCode"},"next":{"title":"read","permalink":"/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/read"}}');var n=o(74848),c=o(28453);const s={},a="operator == method",d={},i=[{value:"Implementation",id:"implementation",level:2},{value:"CachedUserActionAdapter class",id:"cacheduseractionadapter-class",level:5}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{children:(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"operator--method",children:"operator == method"})})}),"\n",(0,n.jsx)("div",{children:(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["@",(0,n.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/override-constant.html",children:"override"})]}),"\n"]})}),"\n",(0,n.jsxs)(t.p,{children:["[",(0,n.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/bool-class.html",children:"bool"}),"]\noperator ==("]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["[[",(0,n.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/Object-class.md",children:"Object"}),"]\nother]"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:")"}),"\n",(0,n.jsx)(t.p,{children:"override"}),"\n",(0,n.jsx)(t.p,{children:"The equality operator."}),"\n",(0,n.jsxs)(t.p,{children:["The default behavior for all\n",(0,n.jsx)(t.a,{href:"https://api.flutter.dev/flutter/dart-core/Object-class.html",children:"Object"}),"s\nis to return true if and only if this object and ",(0,n.jsx)(t.code,{children:"other"})," are the same\nobject."]}),"\n",(0,n.jsx)(t.p,{children:"Override this method to specify a different equality relation on a\nclass. The overriding method must still be an equivalence relation. That\nis, it must be:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Total: It must return a boolean for all arguments. It should never\nthrow."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Reflexive: For all objects ",(0,n.jsx)(t.code,{children:"o"}),", ",(0,n.jsx)(t.code,{children:"o == o"})," must be true."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Symmetric: For all objects ",(0,n.jsx)(t.code,{children:"o1"})," and ",(0,n.jsx)(t.code,{children:"o2"}),", ",(0,n.jsx)(t.code,{children:"o1 == o2"})," and ",(0,n.jsx)(t.code,{children:"o2 == o1"}),"\nmust either both be true, or both be false."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Transitive: For all objects ",(0,n.jsx)(t.code,{children:"o1"}),", ",(0,n.jsx)(t.code,{children:"o2"}),", and ",(0,n.jsx)(t.code,{children:"o3"}),", if ",(0,n.jsx)(t.code,{children:"o1 == o2"})," and\n",(0,n.jsx)(t.code,{children:"o2 == o3"})," are true, then ",(0,n.jsx)(t.code,{children:"o1 == o3"})," must be true."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The method should also be consistent over time, so whether two objects\nare equal should only change if at least one of the objects was\nmodified."}),"\n",(0,n.jsxs)(t.p,{children:["If a subclass overrides the equality operator, it should override the\n",(0,n.jsx)(t.a,{href:"/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter/hashCode",children:"hashCode"}),"\nmethod as well to maintain consistency."]}),"\n",(0,n.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-language-dart",children:"@override\nbool operator ==(Object other) =>\n    identical(this, other) ||\n    other is CachedUserActionAdapter &&\n        runtimeType == other.runtimeType &&\n        typeId == other.typeId;\n"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/docs/auto-docs/",children:"talawa"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"../../models_caching_cached_user_action/",children:"cached_user_action"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"/docs/auto-docs/models_caching_cached_user_action/CachedUserActionAdapter-class",children:"CachedUserActionAdapter"})}),"\n",(0,n.jsx)(t.li,{children:"operator == method"}),"\n"]}),"\n",(0,n.jsx)(t.h5,{id:"cacheduseractionadapter-class",children:"CachedUserActionAdapter class"})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>a});var r=o(96540);const n={},c=r.createContext(n);function s(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);